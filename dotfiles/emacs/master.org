#+title Guts Emacs Master Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
* Emacs
** Init.el Provides
*** Needs Work
*** How do I make provides work?
** Package Management
*** general

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)

  ;; set a custom el file to preserve my config
  (setq custom-file (expand-file-name "sys_custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

turn on package manager and configure repos to monitor

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
#+end_src

*** use-package config

verify that use-package is installed on startup

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; sets use package to ensure packages are kept up to date always
  (setq use-package-always-ensure 't)

#+end_src
** Visual
*** general

#+begin_src emacs-lisp
;; Turn off startup message and turn off audible bell
(setq inhibit-startup-message t
      visible-bell t
      tab-bar-new-tab-choice "/tmp/scratch.md")
#+end_src


*** font

choices here can be jetbrains mono or any other monospaced font that is installed
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "jetbrains mono:weight=extra-bold"
                      :height 170)
#+end_src

*** Themes

Install and setup Themes
#+begin_src emacs-lisp

(use-package "cyberpunk-theme")
(use-package "cyberpunk-2019-theme")
(use-package "soothe-theme")
(use-package "cherry-blossom-theme")
(use-package "zerodark-theme")
(use-package doom-themes)

(defvar current-theme 'doom-badger)

(load-theme current-theme t)

#+end_src

Set Modeline using doom modeline
[[https://github.com/seagle0128/doom-modeline]]

#+begin_src emacs-lisp
;; doom modeline
(use-package doom-modeline
  :init (doom-modeline-mode t)
  :custom (doom-modeline-height 10))

(use-package all-the-icons)

;; Still need to run all-the-icons-install-fonts

#+end_src

*** ui

#+begin_src emacs-lisp

  ;; turn off scroll bars
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)

  ;; Handle Line Numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Turn off line numbers for certain things
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Usability
*** General

Use no-littering to prevent backup ~ files from being created in git repos
[[https://github.com/emacscollective/no-littering]]

#+begin_src emacs-lisp

(use-package no-littering
  :init (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))



#+end_src

*** evil mode

Install Evil Mode
[[https://github.com/emacs-evil/evil]]

#+begin_src emacs-lisp

  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))

#+end_src

Install Evil collection, which integrates Evil mode with a bunch of other things.
[[https://github.com/emacs-evil/evil-collection]]

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

#+end_src


*** searching
all packages here are documented at swiper repo
TODO: Learn how Ivy, counsel, and swiper work
[[https://github.com/abo-abo/swiper]]

counsel/ivy setup
#+begin_src emacs-lisp

;;;;; Setup Ivy
;;

(use-package ivy
  :diminish
  :bind (:map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done))
  :init
  (ivy-mode t))

;;;;; counsel
;;
(use-package counsel
  :diminish
  :bind (("M-x" . counsel-M-x)
	 ("C-M-j" . counsel-switch-buffer)
	 ("C-x C-f" . counsel-find-file)))

#+end_src

swiper setup
#+begin_src emacs-lisp

;;;;; swiper
;;
(use-package swiper
  :bind ("C-s" . swiper))

#+end_src


*** org mode
**** org babel

TODO: Figure out babel more
[[https://orgmode.org/worg/org-contrib/babel/]]
[[https://orgmode.org/worg/org-contrib/babel/languages/index.html]]


#+begin_src emacs-lisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (shell . t)))

#+end_src

#+begin_src emacs-lisp

;; automatically tangle this file to a config for emacs, appends to save hook
(defun guts/org-babel-tangle-config ()
  (when (string= (buffer-file-name)
		      (expand-file-name "~/arch-linux-setups/dotfiles/emacs/master.org"))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'guts/org-babel-tangle-config nil 'make-it-local)))
 #+end_srC


**** org mode

Setup org mode with some defaults and custom functions
[[https://orgmode.org/]]

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)

;; Define Org agenda files directory

(defun guts/org-mode-setup ()
  ;; Create a list of agenda files looking at the provided agenda files argument
  
  (variable-pitch-mode 0)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (org-bullets-mode 1)
  (org-agenda-file (expand-file-name "~/zettelkasten/daily-todo/agendas/*"))
  (setq evil-auto-indent nil
	org-startup-indented 1))

(defun guts/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text 1)
  (visual-fill-column-mode 1))

(use-package org
  :hook (org-mode . guts/org-mode-setup))

(use-package org-bullets
  :after (org))

(use-package visual-fill-column
  :hook (org-mode . guts/org-mode-visual-fill))
#+end_src

Setup org tempo for templating
TODO: Figure out how to make some templates for terraform in emacs

org tempo docs here:
[[https://orgmode.org/manual/Structure-Templates.html]]
#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	
#+end_src


*** keybindings

Make <escape> always quit
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

TODO: Study General and figure it out
Setup General for custom key bind
[[https://github.com/noctuid/general.el]]

#+begin_src emacs-lisp

(use-package general
  :config
  (general-create-definer guts/action-keys
			  :keymaps '(normal insert visual emacs)
			  :prefix "SPC"
			  :global-prefix "C-SPC")
  (guts/action-keys
   "s" '(:ignore t :which-keys "scaling")
   "t" '(:ignore t :which-keys "toggling")
   "o" '(:ignore t :which-keys "org-mode")))

#+end_src

*** git

TODO: Figure out how to use magit
Install and setup magit
[[https://magit.vc/]]

#+begin_src emacs-lisp
;;;;; magit
;;
(use-package magit
  :bind (("C-g" . magit-status)))

(use-package git-gutter
  :diminish
  :config
  (global-git-gutter-mode 't))

#+end_src


*** documentation

Install and configure which-keys
[[https://github.com/justbur/emacs-which-key]]

#+begin_src emacs-lisp

;; which-key
(use-package which-key
  :init (which-key-mode)
  :diminish (which-key-mode)
  :config (setq which-key-idle-delay 0.5))

#+end_src

Install and configure helpful
[[https://github.com/Wilfred/helpful]]

#+begin_src emacs-lisp
;; install helpful
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  (counsel-describe-symbol-function  #'helpful-symbol)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-symbol] . counsel-describe-symbol)
  ([remap describe-key] . helpful-key)
  ("<f1> f" . counsel-describe-function)
  ("<f1> v" . counsel-describe-variable)
  ("<f1> o" . counsel-describe-symbol)
  ("<f1> l" . counsel-find-library))

#+end_src

command log mode
[[https://github.com/lewang/command-log-mode]]

#+begin_src emacs-lisp

;; Command log buffer: shows the commands that are being run on key presses
(use-package command-log-mode)
;;

#+end_src


*** programming languages
**** Generic/all

Rainbow delimiters to improve usability for all languages

#+begin_src emacs-lisp
;; ELisp support START

(use-package rainbow-delimiters
  :ensure t
  :diminish
  :hook (prog-mode . rainbow-delimiters-mode))
;;

#+end_src

YaSnippet cuz it's the coolest
[[https://github.com/joaotavora/yasnippet/blob/master/README.mdown]]

#+begin_src emacs-lisp
(use-package yasnippet)
#+end_src

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

**** Terraform/HCL

Install HCL for packer, etc.

#+begin_src emacs-lisp
(use-package hcl-mode)
#+end_src

#+begin_src emacs-lisp
;; Terraform support START
(use-package terraform-mode)
(use-package terraform-doc)

(require 'terraform-doc)
#+end_src

**** Shell

Install bash completion for easier time in the shell
[[https://github.com/szermatt/emacs-bash-completion]]


#+begin_src emacs-lisp
(use-package bash-completion
  :hook (shell-mode-hook . bash-completion))
#+end_src

**** Python



**** Rust

Rust Mode for editing

#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src

**** Powershell

#+begin_src emacs-lisp
(use-package powershell)
#+end_src

**** Kubernetes

Use K8S mode for helm packages and such
https://github.com/TxGVNN/emacs-k8s-mode

     #+begin_src emacs-lisp
     (use-package k8s-mode
       :hook (k8s-mode . yas-minor-mode))
     #+end_src

**** Docker

Add docker container support and TRAMP connection

#+begin_src emacs-lisp
(use-package docker)
(use-package dockerfile-mode)
(use-package docker-tramp)
#+end_src

**** Node

TODO: Figure out if I need Node/JS stuff. If so, check out indium.
[[https://indium.readthedocs.io/en/latest/installation.html]]

**** Go

#+begin_src emacs-lisp
(use-package go-mode)
#+end_src

**** Markdown

#+begin_src emacs-lisp
;; Markdown support
(use-package markdown-mode)
;;
#+end_src

**** Scala


#+begin_src emacs-lisp
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
#+end_src

     
* system

todo: Set up configuration files for my system
