#+title Guts Emacs Master Configuration
* DONE Decide the sections under Emacs and System config to start
* TODO Move the emacs lisp from current init to master.org
* TODO Use Babel to export a custom init.el to ~/.config/emacs/init.el
* TODO Make Babel OVERWRITE an existing init.el file when it exports
* Emacs
** Init.el Provides
*** Needs Work
*** How do I make provides work?
** Package Management
*** General

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)

  ;; Set a custom el file to preserve my config
  (setq custom-file (expand-file-name "sys_custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

Turn on Package manager And configure Repos to monitor

#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (package-refresh-contents)

#+end_src

*** Use-Package config

Verify that Use-package is installed on startup

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

  ;; Sets use package to ensure packages are kept up to date always
  (setq use-package-always-ensure 't)

#+end_src
** Visual
*** General

#+begin_src emacs-lisp
  ;; Turn off startup message and turn off audible bell
  (setq inhibit-startup-message t)
  (setq visible-bell t)
#+end_src


*** Font

Choices here can be JetBrains Mono or any other monospaced font that is installed
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "JetBrains Mono:weight=extra-bold"
                      :height 170)
#+end_src

*** Themes

Install and setup Themes
#+begin_src emacs-lisp

(use-package "cyberpunk-theme")
(use-package "cyberpunk-2019-theme")
(use-package "soothe-theme")
(use-package "cherry-blossom-theme")
(use-package "zerodark-theme")
(use-package doom-themes)

(defvar current-theme 'doom-horizon)

(load-theme current-theme t)

#+end_src
*** UI

#+begin_src emacs-lisp

  ;; turn off scroll bars
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)

  ;; Handle Line Numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Turn off line numbers for certain things
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Usability
*** Evil Mode

Install Evil Mode
[[https://github.com/emacs-evil/evil]]

#+begin_src emacs-lisp

  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))

#+end_src

Install Evil collection, which integrates Evil mode with a bunch of other things.
[[https://github.com/emacs-evil/evil-collection]]

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

#+end_src

*** Searching
*** Org Mode
**** Org mode

Setup Org mode with some defaults and custom functions
[[https://orgmode.org/]]

#+begin_src emacs-lisp
(defun guts/org-mode-setup ()
  (variable-pitch-mode 0)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil
        org-startup-indented 1))

(defun guts/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text 1)
  (visual-fill-column-mode 1))

(use-package org
  :hook (org-mode . guts/org-mode-setup))

(use-package org-bullets
  :after (org)
  :config (org-bullets-mode 1))

(use-package visual-fill-column
  :hook (org-mode . guts/org-mode-visual-fill))

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	
#+end_src


**** Org Babel

This still needs some work
[[https://orgmode.org/worg/org-contrib/babel/]]
[[https://orgmode.org/worg/org-contrib/babel/languages/index.html]]


#+begin_src emacs-lisp
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (shell . t)))

#+end_src

*** keybindings

Make <escape> always quit
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

Setup General for custom key bind
#+begin_src emacs-lisp

(use-package general
  :config
  (general-create-definer guts/action-keys
			  :keymaps '(normal insert visual emacs)
			  :prefix "SPC"
			  :global-prefix "C-SPC")
  (guts/action-keys
   "s" '(:ignore t :which-keys "scaling")
   "t" '(:ignore t :which-keys "toggling")
   "o" '(:ignore t :which-keys "org-mode")))

#+end_src
*** Git
*** Documentation

Install and configure which-keys
#+begin_src emacs-lisp

;; which-key
(use-package which-key
  :init (which-key-mode)
  :diminish (which-key-mode)
  :config (setq which-key-idle-delay 0.5))

#+end_src

Install and configure helpful
[[https://github.com/Wilfred/helpful]]

#+begin_src emacs-lisp
;; install helpful
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  (counsel-describe-symbol-function  #'helpful-symbol)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-symbol] . counsel-describe-symbol)
  ([remap describe-key] . helpful-key)
  ("<f1> f" . counsel-describe-function)
  ("<f1> v" . counsel-describe-variable)
  ("<f1> o" . counsel-describe-symbol)
  ("<f1> l" . counsel-find-library))

#+end_src
*** Programming Languages
**** Generic/all
**** Terraform
**** Shell
**** Python
**** Rust
**** Powershell
**** Kubernetes
**** Docker
**** Node
**** Go
* System
