;;;;;;;;;;;;;;; Boilerplate START
;;;;;
;; Preserve my clean init file START
(setq custom-file (expand-file-name "sys_custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
;; Preserve my clean init file END
;;;;;

;;;;;
;; Startup packages require START
(require 'package)

;; Startup packages require END
;;;;;

;;;;;
;; Set use-package START

(setq package-enable-at-startup nil)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package)
  )

;; Set use-package END
;;;;;

;;;;;;;;;;;;;;; Boilerplate END

;;;;;;;;;;;;;;; Use package calls

;;;;;
;; Evil START

(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1)
  )

;; Evil END
;;;;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"])
 '(custom-enabled-themes '(wheatgrass)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
